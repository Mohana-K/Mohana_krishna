Write a program to calculate nPr. nPr represents n permutation r and value of nPr is (n!) / (n-r)!.

Example 1:

Input: n = 2, r = 1
Output: 2
Explaination: 2!/(2-1)! = 2!/1! = (2*1)/1 = 2.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ n, r ≤ 20

code:

class Solution:
    def nPr(self, n, r):
        # code here
        N=1
        D=1
        for i in range(1,(n+1)):
            N=N*i
        for i in range(1,((n-r)+1)):
            D=D*i
        nPr=N//D;
        return nPr;

